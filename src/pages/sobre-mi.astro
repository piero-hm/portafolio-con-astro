---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout activePage={Astro.url.pathname} title="Sobre Mí - Piero" description="Conoce más sobre Piero, estudiante de Ingeniería de Sistemas e Informática, sus intereses y habilidades.">
  <main class="max-w-7xl mx-auto my-12 pt-12 px-4">
    <div class="glass-card p-8 md:p-12 fade-in-1">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-white">Más sobre mí</h1>
        <div class="max-w-2xl mx-auto mt-4">
          <p class="text-lg text-gray-300 mb-4">
            Me interesa especialmente la forma en que las matemáticas abstractas
            se implementan en la programación para salvaguardar la información,
            lo cual despertó en mí un gran interés por la criptografía.
          </p>
          <p class="text-lg text-gray-300">
            Mi primer “Hola Mundo” fue en Python. Aunque al inicio tuve
            dificultades, descubrí que aprendo rápido y me adapto con facilidad
            a distintos entornos y herramientas.
          </p>
        </div>
      </div>

      <div
        class="bg-black text-green-400 font-mono rounded-lg p-4 shadow-xl hover:shadow-blue-500/50 transition-shadow duration-300 overflow-x-auto mt-8 max-w-3xl mx-auto"
      >
        <pre id="terminal" class="whitespace-pre-wrap text-xs"></pre>
      </div>

      <script>
        document.addEventListener("DOMContentLoaded", () => {
          const terminal = document.getElementById("terminal");

          const lines = [
            [
              { text: "┌─[", class: "terminal-prompt" },
              { text: "~/home/student", class: "terminal-path" },
              { text: "]", class: "terminal-prompt" },
              { text: " ", class: "" },
              { text: "$", class: "terminal-prompt" },
              { text: " whoami", class: "terminal-command" },
            ],
            [{ text: "Piero", class: "terminal-output" }],
            [{ text: "", class: "" }],
            [
              { text: "┌─[", class: "terminal-prompt" },
              { text: "~/home/student", class: "terminal-path" },
              { text: "]", class: "terminal-prompt" },
              { text: " ", class: "" },
              { text: "$", class: "terminal-prompt" },
              { text: " cat /etc/motd", class: "terminal-command" },
            ],
            [{ text: "Estudiante de Ingeniería de Sistemas e Informática", class: "terminal-info" }],
            [{ text: "Curioso · Autodidacta · Linux", class: "terminal-info" }],
            [{ text: "", class: "" }],
            [
              { text: "┌─[", class: "terminal-prompt" },
              { text: "~/home/student", class: "terminal-path" },
              { text: "]", class: "terminal-prompt" },
              { text: " ", class: "" },
              { text: "$", class: "terminal-prompt" },
              { text: " neofetch", class: "terminal-command" },
            ],
            [{ text: "piero@hm", class: "terminal-output" }],
            [
              { text: "OS: ", class: "terminal-info" },
              { text: "Fedora Linux", class: "terminal-value" },
            ],
            [
              { text: "Shell: ", class: "terminal-info" },
              { text: "bash", class: "terminal-value" },
            ],
            [
              { text: "Location: ", class: "terminal-info" },
              { text: "Perú", class: "terminal-value" },
            ],
            [
              { text: "Languages: ", class: "terminal-info" },
              { text: "C++ · Python · Bash · SQL · Git · HTML · CSS", class: "terminal-value" },
            ],
            [
              { text: "Focus: ", class: "terminal-info" },
              { text: "Ciberseguridad · Criptografía", class: "terminal-value" },
            ],
            [
              { text: "Editors: ", class: "terminal-info" },
              { text: "VSCode · Neovim(LazyVim)", class: "terminal-value" },
            ],
          ];

          let lineIndex = 0;
          let segmentIndex = 0;

          function typeSegment() {
            if (lineIndex < lines.length) {
              const currentLine = lines[lineIndex];
              if (segmentIndex < currentLine.length) {
                const segmentData = currentLine[segmentIndex];
                const span = document.createElement('span');
                span.className = segmentData.class;
                span.textContent = segmentData.text;
                terminal.appendChild(span);

                segmentIndex++;
                setTimeout(typeSegment, 50); // Velocidad de escritura de segmento
              } else {
                // End of current line, add a line break and move to next line
                terminal.innerHTML += "<br>";
                lineIndex++;
                segmentIndex = 0;
                setTimeout(typeSegment, 300); // Pausa antes de la siguiente línea
              }
            }
          }
          typeSegment();
        });
      </script>
    </div>
  </main>
</BaseLayout>
